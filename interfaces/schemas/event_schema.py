import json
from typing import List

import discord

from domain.entities.message import Message
from domain.entities.task import Task
from domain.events.capture import Capture
from domain.value_objects.agent_profile import AgentProfile
from infrastructure.platform.webhook_handler import WebhookName


def build_capture_event(
        interaction: discord.Interaction,
        message_ids: List[int],
        messages: List[Message]
) -> Capture:
    """
    Build a Capture event from raw handler data.
    Args:
        interaction: The Discord interaction that triggered the event
        message_ids: List of message IDs to capture
        messages: List of domain Message objects
    Returns:
        Capture: A fully assembled Capture event
    """
    # Generate unique identifiers
    session_id = f"session-{interaction.guild_id}-{interaction.channel_id}"
    chatmill_id = f"missspec-{interaction.guild_id}-{interaction.channel_id}-{interaction.id}"
    event_id = f"evt-{interaction.guild_id}-{interaction.channel_id}-{interaction.id}"

    # Build Task payload
    task_payload = Task(
        chatmill_id=chatmill_id,
        external_id=None,
        title="需求草案标题示例",
        description="需求描述示例，后续可自动生成或由用户补充",
        message_ids=[str(mid) for mid in message_ids],
        start_time=None,
        end_time=None,
        storypoints=None,
        assignees=[str(interaction.user.id)],
        priority="medium",
        parent_task=None,
        sub_tasks=[],
        history=[]
    )

    # Build AgentProfile value object
    agent_profile = AgentProfile(
        avatar_url=getattr(interaction.client, 'avatar_url', None),
        webhook_name=WebhookName.MISSSPEC.value,
        channel_id=interaction.channel_id,
        guild_id=interaction.guild_id,
        agent_end="missspec"
    )

    # Build and return Capture event
    return Capture(
        session_id=session_id,
        event_id=event_id,
        operator_id=str(interaction.user.id),
        payload=task_payload,
        history=[],
        messages=messages,
        agent_profile=agent_profile
    )


def build_discord_embeds_from_supplement_request(supplement_request: dict) -> list:
    """
    Build a list of visually appealing Discord Embed objects from a SupplementRequest dict, splitting content into multiple themed embeds.
    Returns: List[discord.Embed]
    """
    embeds = []
    # 1. 主问题/描述
    main_embed = discord.Embed(
        title="📝 Supplement Request",
        description=f"**{supplement_request.get('question', '')}**",
        color=discord.Color.purple()
    )
    main_embed.add_field(
        name="Event Info",
        value=(
            f"**Type:** `{supplement_request.get('event_type', '')}`\n"
            f"**Session:** `{supplement_request.get('session_id', '')}`\n"
            f"**Event ID:** `{supplement_request.get('event_id', '')}`"
        ),
        inline=False
    )
    main_embed.set_footer(text="Generated by Chatmill")
    embeds.append(main_embed)
    # 2. 任务信息
    task = supplement_request.get("task") or supplement_request.get("payload")
    if task:
        task_embed = discord.Embed(
            title="🗂️ Task Info",
            color=discord.Color.blue()
        )
        task_str = "\n".join([f"• **{k}**: {v}" for k, v in task.items()])
        task_embed.description = task_str
        embeds.append(task_embed)
    # 3. 消息历史
    messages = supplement_request.get("messages", [])
    if messages:
        msg_embed = discord.Embed(
            title="💬 Messages",
            color=discord.Color.green()
        )
        msg_str = "\n".join([
            f"> **{m.get('author_name', '')}** [{m.get('timestamp', '')[:19].replace('T', ' ')}]: {m.get('content', '')}" for m in messages
        ])
        msg_embed.description = msg_str
        embeds.append(msg_embed)
    # 4. 其他字段
    skip_keys = {"question", "event_type", "session_id", "event_id", "task", "payload", "agent_profile", "messages"}
    other_fields = [(k, v) for k, v in supplement_request.items() if k not in skip_keys]
    if other_fields:
        other_embed = discord.Embed(
            title="🔹 Other Info",
            color=discord.Color.orange()
        )
        for k, v in other_fields:
            v_str = json.dumps(v, ensure_ascii=False, indent=2) if isinstance(v, (dict, list)) else str(v)
            other_embed.add_field(name=k, value=v_str[:1024], inline=False)
        embeds.append(other_embed)
    return embeds
